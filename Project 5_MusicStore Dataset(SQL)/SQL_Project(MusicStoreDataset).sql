--Selecting the citites with best customers
  
SELECT 
  BILLINGCITY, 
  SUM(TOTAL) 
FROM INVOICE 
GROUP BY 1 
ORDER BY 2 DESC

--Selecting the best customer

SELECT 
  C.CUSTOMER_ID, 
  SUM(I.TOTAL) 
FROM 
  CUSTOMER C 
  JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID 
GROUP BY 1 
ORDER BY 2 DESC

--Selecting how much did the users spent total per country

SELECT 
  C.COUNTRY, 
  C.FIRSTNAME || ' ' || C.LASTNAME AS CUSTOMER, 
  SUM(I.TOTAL) 
FROM 
  INVOICE I 
  JOIN CUSTOMER C ON C.CUSTOMER_ID = I.CUSTOMER_ID 
GROUP BY 1, 2 
ORDER BY 3 DESC

--Selecting the songs per genre

SELECT 
  G.NAME, 
  COUNT(T.TRACK_ID) 
FROM 
  TRACK T 
  JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID 
GROUP BY 1 
ORDER BY 2 DESC


--Selecting all the track names that have a song length longer than the average song length.

SELECT NAME,MILISECONDS
FROM TRACK
WHERE MILISECONDS > (
	SELECT AVG(MILISECINDS) AS AVG_TRACK_LENGTH
	FROM TRACK )
ORDER BY MILISECONDS DESC;


--Selecting the rock bands. For this ,extracting Genre, Track , Album, and Artist tables

SELECT 
  AR.NAME, 
  COUNT(T.NAME) 
FROM 
  TRACK T 
  JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID 
  JOIN ALBUM AL ON AL.ALBUM_ID = T.ALBUM_ID 
  JOIN ARTIST AR ON AR.ARTIST_ID = AL.ARTIST_ID 
WHERE 
  G.NAME = 'Rock' 
GROUP BY 1 
ORDER BY 2 DESC

--Selecting how much did each customer spent per genre

SELECT 
  C.CUSTOMER_ID, 
  C.LASTNAME, 
  C.FIRSTNAME, 
  G.NAME GENRE, 
  SUM(IL.UNITPRICE) 
FROM 
  CUSTOMER C 
  JOIN INVOICE I ON I.CUSTOMER_ID = C.CUSTOMER_ID 
  JOIN INVOICELINE IL ON IL.INVOICE_ID = I.INVOICE_ID 
  JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID 
  JOIN GENRE G ON G.GENRE_ID = T.GENRE_ID 
GROUP BY 1,2,3,4
ORDER BY 1

--Selecting how much was spent all over for each genre

SELECT 
  G.NAME GENRE, 
  SUM(IL.UNITPRICE) 
FROM 
  CUSTOMER C 
  JOIN INVOICE I ON I.CUSTOMER_ID = C.CUSTOMER_ID 
  JOIN INVOICELINE IL ON IL.INVOICE_ID = I.INVOICE_ID 
  JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID 
  JOIN GENRE G ON G.GENRE_ID = T.GENRE_ID 
GROUP BY 1 
ORDER BY 2 DESC

--Finding which artist has earned the most using InvoiceLines

SELECT 
  Y.NAME AS ARTIST_NAME, 
  SUM(TOTAL) AS GRAND_TOTAL 
FROM(
    SELECT 
      X.NAME, 
      X.UNITPRICE * X.QUANTITY AS TOTAL 
    FROM(
        SELECT 
          AR.NAME, 
          IL.UNITPRICE, 
          IL.QUANTITY 
        FROM 
          ARTIST AR 
          JOIN ALBUM AL ON AR.ARTIST_ID = AL.ARTIST_ID 
          JOIN TRACK T ON AL.ALBUM_ID = T.ALBUM_ID 
          JOIN INVOICELINE IL ON T.TRACK_ID = IL.TRACK_ID 
        ORDER BY 1 DESC
		) AS X
  ) AS Y 
GROUP BY 1 
ORDER BY 2 DESC 

--Selecting the top purchasers

SELECT 
  C.CUSTOMER_ID, 
  C.FIRSTNAME || ' ' || C.LASTNAME AS CUSTOMER, 
  AR.NAME AS ARTIST, 
  SUM(IL.UNITPRICE) AS PRICE 
FROM 
  CUSTOMER C 
  JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID 
  JOIN INVOICELINE IL ON I.INVOICE_ID = IL.INVOICE_ID 
  JOIN TRACK T ON IL.TRACK_ID = T.TRACK_ID 
  JOIN ALBUM AL ON T.ALBUM_ID = AL.ALBUM_ID 
  JOIN ARTIST AR ON AL.ARTIST_ID = AR.ARTIST_ID 
WHERE AR.NAME = 'Iron Maiden' 
GROUP BY 1,2,3
ORDER BY 4 DESC 





